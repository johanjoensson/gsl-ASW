<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="spherical__fun_8h" kind="file" language="C++">
    <compoundname>spherical_fun.h</compoundname>
    <includes local="no">ostream</includes>
    <includes refid="utils_8h" local="yes">utils.h</includes>
    <includes refid="ewald__int_8h" local="yes">ewald_int.h</includes>
    <includes local="yes">GSLpp/vector.h</includes>
    <includes local="yes">GSLpp/special_functions.h</includes>
    <includedby refid="bloch__sum_8h" local="yes">bloch_sum.h</includedby>
    <includedby refid="gaunt_8h" local="yes">gaunt.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>functional</label>
      </node>
      <node id="9">
        <label>GSLpp/special_functions.h</label>
      </node>
      <node id="3">
        <label>utils.h</label>
        <link refid="utils_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>GSLpp/vector.h</label>
      </node>
      <node id="1">
        <label>spherical_fun.h</label>
        <link refid="spherical__fun_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ostream</label>
      </node>
      <node id="8">
        <label>log_mesh.h</label>
        <link refid="log__mesh_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="6">
        <label>ewald_int.h</label>
        <link refid="ewald__int_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="10">
        <label>cstddef</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>bloch_sum.h</label>
        <link refid="bloch__sum_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>spherical_fun.h</label>
        <link refid="spherical__fun_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>gaunt.h</label>
        <link refid="gaunt_8h_source"/>
      </node>
      <node id="4">
        <label>simulation.h</label>
        <link refid="simulation_8h_source"/>
      </node>
      <node id="3">
        <label>structure_const.h</label>
        <link refid="structure__const_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classSpherical__function" prot="public">Spherical_function</innerclass>
    <innerclass refid="classHankel__function" prot="public">Hankel_function</innerclass>
    <innerclass refid="classBessel__function" prot="public">Bessel_function</innerclass>
    <innerclass refid="classNeumann__function" prot="public">Neumann_function</innerclass>
    <innerclass refid="classIntegral__Hankel__function" prot="public">Integral_Hankel_function</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="spherical__fun_8h_1a7df8b1bae40b1d82c4bb7157168d180d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double wronskian</definition>
        <argsstring>(Spherical_function a, Spherical_function b, double r)</argsstring>
        <name>wronskian</name>
        <param>
          <type><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/spherical_fun.h" line="32" column="8" declfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/spherical_fun.h" declline="32" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="spherical__fun_8h_1a3a54b2c23ed662e97af79d21733438ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long int</type>
        <definition>unsigned long int factorial</definition>
        <argsstring>(int n)</argsstring>
        <name>factorial</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/spherical_fun.h" line="68" column="19" declfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/spherical_fun.h" declline="68" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="spherical__fun_8h_1a7698a51cba450d16e766d4d3a1493f8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GSL::Result</type>
        <definition>GSL::Result cubic_harmonic</definition>
        <argsstring>(const lm &amp;l, const GSL::Vector &amp;r)</argsstring>
        <name>cubic_harmonic</name>
        <param>
          <type>const <ref refid="structlm" kindref="compound">lm</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const GSL::Vector &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/spherical_fun.h" line="70" column="13" declfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/spherical_fun.h" declline="70" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="spherical__fun_8h_1a7a3cfbc4b59fbce6269227090d535b03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GSL::Result</type>
        <definition>GSL::Result cubic_harmonic</definition>
        <argsstring>(const int l, const int m, const double cos_theta, const double phi)</argsstring>
        <name>cubic_harmonic</name>
        <param>
          <type>const int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>cos_theta</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/spherical_fun.h" line="71" column="13" declfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/spherical_fun.h" declline="71" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>SPHERICAL_FUN_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPHERICAL_FUN_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ewald_int.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GSLpp/vector.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GSLpp/special_functions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Functor<sp/>for<sp/>representing<sp/>Spherical<sp/>Bessel<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="classSpherical__function" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlm" kindref="compound">lm</ref><sp/>l_m;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref>()<sp/>:<sp/>l_m()<sp/>{};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlm" kindref="compound">lm</ref><sp/>l_n):l_m(l_n){}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref>&amp;<sp/>f)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref>(<ref refid="classSpherical__function" kindref="compound">Spherical_function</ref>&amp;&amp;<sp/>f)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref>&amp;<sp/>f)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref>&amp;<sp/>operator=(<ref refid="classSpherical__function" kindref="compound">Spherical_function</ref>&amp;&amp;<sp/>f)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classSpherical__function" kindref="compound">Spherical_function</ref>(){}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="24"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.*x;}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_l(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlm" kindref="compound">lm</ref><sp/>l_n)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{l_m<sp/>=<sp/>l_n;};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlm" kindref="compound">lm</ref><sp/>l()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="29"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l_m;};</highlight></codeline>
<codeline lineno="30"><highlight class="normal">};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wronskian(<ref refid="classSpherical__function" kindref="compound">Spherical_function</ref><sp/>a,<sp/><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref><sp/>b,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classHankel__function" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classHankel__function" kindref="compound">Hankel_function</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref></highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classHankel__function" kindref="compound">Hankel_function</ref>()<sp/>:<sp/><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref>(){}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classHankel__function" kindref="compound">Hankel_function</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlm" kindref="compound">lm</ref><sp/>l_n)<sp/>:<sp/><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref>(l_n){}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="classBessel__function" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classBessel__function" kindref="compound">Bessel_function</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref></highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBessel__function" kindref="compound">Bessel_function</ref>()<sp/>:<sp/><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref>(){};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBessel__function" kindref="compound">Bessel_function</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlm" kindref="compound">lm</ref><sp/>l_n)<sp/>:<sp/><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref>(l_n){};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classNeumann__function" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classNeumann__function" kindref="compound">Neumann_function</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref></highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classNeumann__function" kindref="compound">Neumann_function</ref>()<sp/>:<sp/><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref>(){};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classNeumann__function" kindref="compound">Neumann_function</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlm" kindref="compound">lm</ref><sp/>l_n)<sp/>:<sp/><ref refid="classSpherical__function" kindref="compound">Spherical_function</ref>(l_n){};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="classIntegral__Hankel__function" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classIntegral__Hankel__function" kindref="compound">Integral_Hankel_function</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classHankel__function" kindref="compound">Hankel_function</ref></highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEwald__integral" kindref="compound">Ewald_integral</ref><sp/>I;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classIntegral__Hankel__function" kindref="compound">Integral_Hankel_function</ref>()<sp/>:<sp/><ref refid="classHankel__function" kindref="compound">Hankel_function</ref>(),<sp/>I(){};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Hankel_function::operator();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kappa,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>factorial(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">GSL::Result<sp/>cubic_harmonic(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlm" kindref="compound">lm</ref>&amp;<sp/>l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GSL::Vector&amp;<sp/>r);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">GSL::Result<sp/>cubic_harmonic(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cos_theta,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//SPHERICAL_FUN_H</highlight></codeline>
    </programlisting>
    <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/spherical_fun.h"/>
  </compounddef>
</doxygen>
