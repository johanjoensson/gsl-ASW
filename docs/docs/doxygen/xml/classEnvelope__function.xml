<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classEnvelope__function" kind="class" language="C++" prot="public">
    <compoundname>Envelope_function</compoundname>
    <derivedcompoundref refid="classEnvelope__Bessel" prot="public" virt="non-virtual">Envelope_Bessel</derivedcompoundref>
    <derivedcompoundref refid="classEnvelope__Hankel" prot="public" virt="non-virtual">Envelope_Hankel</derivedcompoundref>
    <derivedcompoundref refid="classEnvelope__Neumann" prot="public" virt="non-virtual">Envelope_Neumann</derivedcompoundref>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classEnvelope__function_1a41518f3ca4477df62028318dd6c88f86" prot="protected" static="no" mutable="no">
        <type><ref refid="structlm" kindref="compound">lm</ref></type>
        <definition>lm Envelope_function::l_m</definition>
        <argsstring></argsstring>
        <name>l_m</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" line="12" column="8" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classEnvelope__function_1a14925f5c7ac21806a89fd2b7049d47ed" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double Envelope_function::kappa_m</definition>
        <argsstring></argsstring>
        <name>kappa_m</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" line="13" column="12" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classEnvelope__function_1a4075694daf40dec43b18a7cce9551cfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Envelope_function::Envelope_function</definition>
        <argsstring>(lm l_n, double kappa_n)</argsstring>
        <name>Envelope_function</name>
        <param>
          <type><ref refid="structlm" kindref="compound">lm</ref></type>
          <declname>l_n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>kappa_n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" line="16" column="5" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" bodystart="16" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classEnvelope__function_1a2870da644b995b082437c1774f079774" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Envelope_function::Envelope_function</definition>
        <argsstring>(const Envelope_function &amp;)=default</argsstring>
        <name>Envelope_function</name>
        <param>
          <type>const <ref refid="classEnvelope__function" kindref="compound">Envelope_function</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" line="19" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classEnvelope__function_1a2b4980b7e5866a851316ce87c0edeb75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Envelope_function::Envelope_function</definition>
        <argsstring>(Envelope_function &amp;&amp;)=default</argsstring>
        <name>Envelope_function</name>
        <param>
          <type><ref refid="classEnvelope__function" kindref="compound">Envelope_function</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" line="20" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classEnvelope__function_1a5e7ade4f940bd982224c15305b785b80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classEnvelope__function" kindref="compound">Envelope_function</ref> &amp;</type>
        <definition>Envelope_function&amp; Envelope_function::operator=</definition>
        <argsstring>(const Envelope_function &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classEnvelope__function" kindref="compound">Envelope_function</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" line="22" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classEnvelope__function_1a0e8804f8b1405973c45f991f88ce4cb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classEnvelope__function" kindref="compound">Envelope_function</ref> &amp;</type>
        <definition>Envelope_function&amp; Envelope_function::operator=</definition>
        <argsstring>(Envelope_function &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classEnvelope__function" kindref="compound">Envelope_function</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" line="23" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classEnvelope__function_1a3262d8ef979a989f658b24e4d0f97fdb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual Envelope_function::~Envelope_function</definition>
        <argsstring>()</argsstring>
        <name>~Envelope_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" line="24" column="13" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classEnvelope__function_1a21a876fdc33d23725bdb25990d3f6e6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Envelope_function::operator()</definition>
        <argsstring>(const GSL::Vector r)</argsstring>
        <name>operator()</name>
        <param>
          <type>const GSL::Vector</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" line="26" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classEnvelope__function_1ad48e077935528c47e81775f6371c7184" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>virtual double Envelope_function::barred_fun</definition>
        <argsstring>(const double x) const</argsstring>
        <name>barred_fun</name>
        <reimplementedby refid="classEnvelope__Hankel_1af25265b4a0281fb280ee8bf9858f17bb">barred_fun</reimplementedby>
        <reimplementedby refid="classEnvelope__Bessel_1a8e2399261bcbbfddb84a7f9ea6c7aa32">barred_fun</reimplementedby>
        <reimplementedby refid="classEnvelope__Neumann_1ae01e38e0d0ea4cd19e5942ea669c56b9">barred_fun</reimplementedby>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" line="27" column="20" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" bodystart="27" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classEnvelope__function_1a85cd53700d4090e4c0f6dc2e67d7bb42" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Envelope_function::kappa</definition>
        <argsstring>() const</argsstring>
        <name>kappa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" line="30" column="12" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classEnvelope__function_1a94d64257a361bdbf28e2dd525346ceb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; Envelope_function::kappa</definition>
        <argsstring>()</argsstring>
        <name>kappa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" line="31" column="12" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classEnvelope__function_1a44ac505a0bc963b230a94c0b25d1a61f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structlm" kindref="compound">lm</ref></type>
        <definition>lm Envelope_function::l</definition>
        <argsstring>() const</argsstring>
        <name>l</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" line="33" column="8" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classEnvelope__function_1a5caa2943467fe3e75bf8047ef062f196" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structlm" kindref="compound">lm</ref> &amp;</type>
        <definition>lm&amp; Envelope_function::l</definition>
        <argsstring>()</argsstring>
        <name>l</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" line="34" column="8" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" bodystart="34" bodyend="34"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classEnvelope__function_1a6deb6670a51e4cab8bfb4bf7bd1b57d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend double</type>
        <definition>double atomic_integral</definition>
        <argsstring>(const Envelope_function &amp;, const Envelope_function &amp;, const double rs)</argsstring>
        <name>atomic_integral</name>
        <param>
          <type>const <ref refid="classEnvelope__function" kindref="compound">Envelope_function</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classEnvelope__function" kindref="compound">Envelope_function</ref> &amp;</type>
        </param>
        <param>
          <type>const double</type>
          <declname>rs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" line="36" column="19"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>Envelope_Neumann</label>
        <link refid="classEnvelope__Neumann"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Envelope_function</label>
        <link refid="classEnvelope__function"/>
      </node>
      <node id="2">
        <label>Envelope_Bessel</label>
        <link refid="classEnvelope__Bessel"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Envelope_Hankel</label>
        <link refid="classEnvelope__Hankel"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>lm</label>
        <link refid="structlm"/>
      </node>
      <node id="1">
        <label>Envelope_function</label>
        <link refid="classEnvelope__function"/>
        <childnode refid="2" relation="usage">
          <edgelabel>l_m</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" line="10" column="1" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/envelope_fun.h" bodystart="10" bodyend="37"/>
    <listofallmembers>
      <member refid="classEnvelope__function_1a6deb6670a51e4cab8bfb4bf7bd1b57d1" prot="public" virt="non-virtual"><scope>Envelope_function</scope><name>atomic_integral</name></member>
      <member refid="classEnvelope__function_1ad48e077935528c47e81775f6371c7184" prot="public" virt="virtual"><scope>Envelope_function</scope><name>barred_fun</name></member>
      <member refid="classEnvelope__function_1a4075694daf40dec43b18a7cce9551cfc" prot="public" virt="non-virtual"><scope>Envelope_function</scope><name>Envelope_function</name></member>
      <member refid="classEnvelope__function_1a2870da644b995b082437c1774f079774" prot="public" virt="non-virtual"><scope>Envelope_function</scope><name>Envelope_function</name></member>
      <member refid="classEnvelope__function_1a2b4980b7e5866a851316ce87c0edeb75" prot="public" virt="non-virtual"><scope>Envelope_function</scope><name>Envelope_function</name></member>
      <member refid="classEnvelope__function_1a85cd53700d4090e4c0f6dc2e67d7bb42" prot="public" virt="non-virtual"><scope>Envelope_function</scope><name>kappa</name></member>
      <member refid="classEnvelope__function_1a94d64257a361bdbf28e2dd525346ceb7" prot="public" virt="non-virtual"><scope>Envelope_function</scope><name>kappa</name></member>
      <member refid="classEnvelope__function_1a14925f5c7ac21806a89fd2b7049d47ed" prot="protected" virt="non-virtual"><scope>Envelope_function</scope><name>kappa_m</name></member>
      <member refid="classEnvelope__function_1a44ac505a0bc963b230a94c0b25d1a61f" prot="public" virt="non-virtual"><scope>Envelope_function</scope><name>l</name></member>
      <member refid="classEnvelope__function_1a5caa2943467fe3e75bf8047ef062f196" prot="public" virt="non-virtual"><scope>Envelope_function</scope><name>l</name></member>
      <member refid="classEnvelope__function_1a41518f3ca4477df62028318dd6c88f86" prot="protected" virt="non-virtual"><scope>Envelope_function</scope><name>l_m</name></member>
      <member refid="classEnvelope__function_1a21a876fdc33d23725bdb25990d3f6e6a" prot="public" virt="non-virtual"><scope>Envelope_function</scope><name>operator()</name></member>
      <member refid="classEnvelope__function_1a5e7ade4f940bd982224c15305b785b80" prot="public" virt="non-virtual"><scope>Envelope_function</scope><name>operator=</name></member>
      <member refid="classEnvelope__function_1a0e8804f8b1405973c45f991f88ce4cb8" prot="public" virt="non-virtual"><scope>Envelope_function</scope><name>operator=</name></member>
      <member refid="classEnvelope__function_1a3262d8ef979a989f658b24e4d0f97fdb" prot="public" virt="virtual"><scope>Envelope_function</scope><name>~Envelope_function</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
