<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="classPotential" kind="class" language="C++" prot="public">
    <compoundname>Potential</compoundname>
    <basecompoundref refid="classAtomic__quantity" prot="public" virt="non-virtual">Atomic_quantity</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classPotential_1a52cd045d761215659b2f537f35a83fab" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;double&gt; &gt; Potential::electrostatic</definition>
        <argsstring></argsstring>
        <name>electrostatic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" line="28" column="17" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPotential_1a3814a3352a8284674e89beba4fd2987e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;double&gt; &gt; Potential::exchange_correlation</definition>
        <argsstring></argsstring>
        <name>exchange_correlation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" line="28" column="31" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPotential_1a27184ed3b4748dba7bbb474b612815b4" prot="private" static="no" mutable="no">
        <type>std::function&lt; double(const size_t, const double)&gt;</type>
        <definition>std::function&lt;double(const size_t, const double)&gt; Potential::at_pot</definition>
        <argsstring></argsstring>
        <name>at_pot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" line="29" column="19" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPotential_1ac5b5f48ce4b61208c59282d00d1b0752" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Potential::MT_0</definition>
        <argsstring></argsstring>
        <name>MT_0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" line="30" column="12" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classPotential_1a6a99f6673af280be1d6eb3d6e0a963bb" prot="public" static="no" mutable="no">
        <type><ref refid="classXc__func" kindref="compound">Xc_func</ref></type>
        <definition>Xc_func Potential::xc_fun</definition>
        <argsstring></argsstring>
        <name>xc_fun</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" line="35" column="13" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classPotential_1a81a2a11d1d630530cad3449968690226" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Potential::Xi0</definition>
        <argsstring>(const Site_t&lt; 3 &gt; &amp;j, const double r)</argsstring>
        <name>Xi0</name>
        <param>
          <type>const <ref refid="classSite__t" kindref="compound">Site_t</ref>&lt; 3 &gt; &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" line="32" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPotential_1afff42668a768c6309d94d069ae34824d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Potential::initial_pot</definition>
        <argsstring>(double vol)</argsstring>
        <name>initial_pot</name>
        <param>
          <type>double</type>
          <declname>vol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" line="36" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classPotential_1a2e233e4d4bec88f4961cb1b2e2b81890" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Potential::MT0</definition>
        <argsstring>()</argsstring>
        <name>MT0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" line="38" column="12" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classPotential_1a688eff314106f0421254da2c77288d00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Potential::Potential</definition>
        <argsstring>(const Crystal_t&lt; 3, Atom &gt; &amp;cryst, const std::vector&lt; Logarithmic_mesh &gt; &amp;at_meshes, std::function&lt; double(const size_t Z, const double r)&gt; atomic_potential=[](const size_t Z, const double r){ return -2.*static_cast&lt; double &gt;(Z)/r;})</argsstring>
        <name>Potential</name>
        <param>
          <type>const <ref refid="classCrystal__t" kindref="compound">Crystal_t</ref>&lt; 3, <ref refid="classAtom" kindref="compound">Atom</ref> &gt; &amp;</type>
          <declname>cryst</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classLogarithmic__mesh" kindref="compound">Logarithmic_mesh</ref> &gt; &amp;</type>
          <declname>at_meshes</declname>
        </param>
        <param>
          <type>std::function&lt; double(const size_t Z, const double r)&gt;</type>
          <declname>atomic_potential</declname>
          <defval>[](const size_t Z, const double r){ return -2.*static_cast&lt; double &gt;(Z)/r;}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" line="40" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classPotential_1a6a6eca1dc9b32494f6189404e503eb38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Potential::set_xc_fun</definition>
        <argsstring>(XC_FUN xc_func)</argsstring>
        <name>set_xc_fun</name>
        <param>
          <type>XC_FUN</type>
          <declname>xc_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" line="46" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classAtomic__quantity_1a5bd9055fdf94e57e54a355d5aa818b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Atomic_quantity::operator()</definition>
        <argsstring>(const GSL::Vector &amp;r)</argsstring>
        <name>operator()</name>
        <param>
          <type>const GSL::Vector &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" line="22" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classAtomic__quantity_1adfdeab2507a0b975643b53b1df2319b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; double &gt; &amp;</type>
        <definition>std::vector&lt;double&gt;&amp; Atomic_quantity::sphere</definition>
        <argsstring>(const size_t i)</argsstring>
        <name>sphere</name>
        <param>
          <type>const size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" line="24" column="17" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" bodystart="24" bodyend="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classAtomic__quantity_1a0fb317241d287bde4bbee6cade84a45f" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classCrystal__t" kindref="compound">Crystal_t</ref>&lt; 3, <ref refid="classAtom" kindref="compound">Atom</ref> &gt; &amp;</type>
        <definition>const Crystal_t&lt;3,Atom&gt;&amp; Atomic_quantity::cr</definition>
        <argsstring></argsstring>
        <name>cr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" line="15" column="21" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classAtomic__quantity_1a38619ec6589df0672464f3512243c13f" prot="protected" static="no" mutable="no">
        <type>const std::vector&lt; <ref refid="classLogarithmic__mesh" kindref="compound">Logarithmic_mesh</ref> &gt; &amp;</type>
        <definition>const std::vector&lt;Logarithmic_mesh&gt;&amp; Atomic_quantity::at_meshes</definition>
        <argsstring></argsstring>
        <name>at_meshes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" line="16" column="23" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classAtomic__quantity_1a69f4c5e435c8c32883528b7cf2099616" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;double&gt; &gt; Atomic_quantity::val</definition>
        <argsstring></argsstring>
        <name>val</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" line="17" column="17" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Potential</label>
        <link refid="classPotential"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Atomic_quantity</label>
        <link refid="classAtomic__quantity"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Potential</label>
        <link refid="classPotential"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>xc_fun</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>Logarithmic_mesh</label>
        <link refid="classLogarithmic__mesh"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>Mesh</label>
        <link refid="classMesh"/>
        <childnode refid="7" relation="usage">
          <edgelabel>x2_p</edgelabel>
          <edgelabel>x_p</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::vector&lt; double &gt;</label>
      </node>
      <node id="2">
        <label>Atomic_quantity</label>
        <link refid="classAtomic__quantity"/>
        <childnode refid="3" relation="usage">
          <edgelabel>cr</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>at_meshes</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>val</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::vector&lt; Logarithmic_mesh &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>Crystal_t&lt; 3, Atom &gt;</label>
        <link refid="classCrystal__t"/>
      </node>
      <node id="8">
        <label>std::vector&lt; std::vector&lt; double &gt; &gt;</label>
      </node>
      <node id="9">
        <label>Xc_func</label>
        <link refid="classXc__func"/>
      </node>
    </collaborationgraph>
    <location file="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" line="27" column="1" bodyfile="/home/jjonsson/Programming/gsl-ASW/include/gsl-asw/atomic_quantity.h" bodystart="27" bodyend="47"/>
    <listofallmembers>
      <member refid="classAtomic__quantity_1a38619ec6589df0672464f3512243c13f" prot="protected" virt="non-virtual"><scope>Potential</scope><name>at_meshes</name></member>
      <member refid="classPotential_1a27184ed3b4748dba7bbb474b612815b4" prot="private" virt="non-virtual"><scope>Potential</scope><name>at_pot</name></member>
      <member refid="classAtomic__quantity_1ae304531ff42ea30b543a9fb704e0474b" prot="public" virt="non-virtual"><scope>Potential</scope><name>Atomic_quantity</name></member>
      <member refid="classAtomic__quantity_1a0fb317241d287bde4bbee6cade84a45f" prot="protected" virt="non-virtual"><scope>Potential</scope><name>cr</name></member>
      <member refid="classPotential_1a52cd045d761215659b2f537f35a83fab" prot="private" virt="non-virtual"><scope>Potential</scope><name>electrostatic</name></member>
      <member refid="classPotential_1a3814a3352a8284674e89beba4fd2987e" prot="private" virt="non-virtual"><scope>Potential</scope><name>exchange_correlation</name></member>
      <member refid="classPotential_1afff42668a768c6309d94d069ae34824d" prot="public" virt="non-virtual"><scope>Potential</scope><name>initial_pot</name></member>
      <member refid="classPotential_1a2e233e4d4bec88f4961cb1b2e2b81890" prot="public" virt="non-virtual"><scope>Potential</scope><name>MT0</name></member>
      <member refid="classPotential_1ac5b5f48ce4b61208c59282d00d1b0752" prot="private" virt="non-virtual"><scope>Potential</scope><name>MT_0</name></member>
      <member refid="classAtomic__quantity_1a5bd9055fdf94e57e54a355d5aa818b6c" prot="public" virt="non-virtual"><scope>Potential</scope><name>operator()</name></member>
      <member refid="classPotential_1a688eff314106f0421254da2c77288d00" prot="public" virt="non-virtual"><scope>Potential</scope><name>Potential</name></member>
      <member refid="classPotential_1a6a6eca1dc9b32494f6189404e503eb38" prot="public" virt="non-virtual"><scope>Potential</scope><name>set_xc_fun</name></member>
      <member refid="classAtomic__quantity_1adfdeab2507a0b975643b53b1df2319b1" prot="public" virt="non-virtual"><scope>Potential</scope><name>sphere</name></member>
      <member refid="classAtomic__quantity_1a69f4c5e435c8c32883528b7cf2099616" prot="protected" virt="non-virtual"><scope>Potential</scope><name>val</name></member>
      <member refid="classPotential_1a6a99f6673af280be1d6eb3d6e0a963bb" prot="public" virt="non-virtual"><scope>Potential</scope><name>xc_fun</name></member>
      <member refid="classPotential_1a81a2a11d1d630530cad3449968690226" prot="private" virt="non-virtual"><scope>Potential</scope><name>Xi0</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
