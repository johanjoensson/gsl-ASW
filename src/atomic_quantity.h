#ifndef ATOMIC_QUANTITY_H
#define ATOMIC_QUANTITY_H
#include <vector>
#include "../../GSL-lib/src/vector.h"
#include "atom.h"
#include "xc_func.h"

/***************************************************************************//**
* Superclass used for representing gengeral properties of atomic quantities.\n
* Contains:\n
* __sites__ - All atoms currently under consideration.\n
* __val__ - Values of the atomic quantities for the atoms under consideration.\n
*******************************************************************************/
class Atomic_quantity{
    friend class Augmented_spherical_wave;

public:
    Atomic_quantity();
    Atomic_quantity(Atomic_quantity&) = default;
    Atomic_quantity(Atomic_quantity&&) = default;
    virtual ~Atomic_quantity() = default;

    Atomic_quantity(const std::vector<Atom> atoms);

    std::vector<Atom> sites;
    std::vector<std::vector<double>> val;

    //! Obtain value of atomic quantity at point r (possibly combining values
    //! from several atoms)
    double operator()(const GSL::Vector& r);

    Atomic_quantity& operator=(const Atomic_quantity&) = default;
    Atomic_quantity& operator=(Atomic_quantity&&) = default;
};

/***************************************************************************//**
* Class used fof representing the potential.\n
* Contains:\n
* __electrostatic__ - Electrostatic part of the potential, coming from electrons
* and ions.\n
* __exchange_correlation__ - Exchange-correlation contribution of the potential.
* Calculated using XCFun.\n
*******************************************************************************/
class Potential : public Atomic_quantity{
    std::vector<std::vector<double>> electrostatic, exchange_correlation;

public:
    Xc_func xc_fun;
    void initial_pot(unsigned int nel, double vol);

    double MT_0;

    Potential(std::vector<Atom>& atoms);
    ~Potential(){};

    Potential(Potential&) = default;
    Potential(Potential&&) = default;
    Potential& operator=(const Potential&) = default;
    Potential& operator=(Potential&&) = default;

    void set_xc_fun(XC_FUN xc_func);
};

/***************************************************************************//**
* Class used for representing the electronic charge density.\n
* Contains:\n
* __valence__ - Density gengerated by valence electrons.\n
* __core__ - Density generated by core electrons.\n
*******************************************************************************/
class Density : public Atomic_quantity{
    std::vector<double> valence, core;

public:
    ~Density() {};
    Density(Density&) = default;
    Density(Density&&) = default;

    Density& operator=(const Density&) = default;
    Density& operator=(Density&&) = default;

    Density(std::vector<Atom>& atoms);
};
#endif // ATOMIC_QUANTITY_H
